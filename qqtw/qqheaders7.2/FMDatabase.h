//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString;

@interface FMDatabase : NSObject
{
    struct sqlite3 *_db;
    NSString *_databasePath;
    _Bool _logsErrors;
    _Bool _crashOnErrors;
    _Bool _traceExecution;
    _Bool _checkedOut;
    _Bool _shouldCacheStatements;
    _Bool _isExecutingStatement;
    _Bool _inTransaction;
    double _busyTimeout;
    NSMutableDictionary *_cachedStatements;
    NSMutableSet *_openFunctions;
    NSDateFormatter *_dateFormat;
    id <IDBExceptionHandler> dbExceptionHandler;
    struct map<unsigned int, FMStatement *, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, FMStatement *>>> _statementCache;
    unsigned int _sqlId;
}

+ (id)databaseWithPath:(id)arg1;
+ (void)registerTokenizer:(id)arg1;
+ (void)registerTokenizer:(id)arg1 withKey:(id)arg2;
+ (id)storeableDateFormat:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned int)applicationID;
- (_Bool)beginDeferredTransaction;
- (_Bool)beginTransaction;
- (void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;
- (_Bool)bindParamToStatement:(struct sqlite3_stmt *)arg1 vaList:(char *)arg2;
- (_Bool)boolForQuery:(id)arg1;
@property double busyTimeout; // @synthesize busyTimeout=_busyTimeout;
- (unsigned int)cacheSql:(id)arg1;
- (id)cachedStatementForQuery:(id)arg1;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
- (int)changes;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
- (void)clearAllStatement;
- (void)clearCachedStatements;
- (_Bool)close;
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;
- (_Bool)commit;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
- (id)dataForQuery:(id)arg1;
- (_Bool)databaseExists;
- (id)databasePath;
- (id)dateForQuery:(id)arg1;
- (id)dateFromString:(id)arg1;
- (void)dealloc;
- (double)doubleForQuery:(id)arg1;
- (id)errorWithMessage:(id)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(char *)arg4;
- (id)executeQueryWithFormat:(id)arg1;
- (id)executeQueryWithStatement:(id)arg1 sql:(id)arg2 vaList:(char *)arg3;
- (id)executeQueryWithStatementId:(unsigned int)arg1 sql:(id)arg2;
- (_Bool)executeStatements:(id)arg1;
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;
- (_Bool)executeUpdate:(id)arg1;
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(char *)arg5;
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;
- (_Bool)executeUpdateWithStatement:(id)arg1 sql:(id)arg2 vaList:(char *)arg3;
- (_Bool)executeUpdateWithStatementId:(unsigned int)arg1 sql:(id)arg2;
- (int)executeUpdateWithStmt:(struct sqlite3_stmt *)arg1;
- (void)extractSQL:(id)arg1 argumentsList:(char *)arg2 intoString:(id)arg3 arguments:(id)arg4;
- (void)finalize;
- (id)getSchema;
- (id)getStatementById:(unsigned int)arg1;
- (id)getTableSchema:(id)arg1;
- (_Bool)goodConnection;
- (_Bool)hasDateFormatter;
- (_Bool)inTransaction;
- (id)init;
- (id)initWithPath:(id)arg1;
- (_Bool)installTokenizerModule;
- (_Bool)installTokenizerModuleWithName:(id)arg1;
- (int)intForQuery:(id)arg1;
- (_Bool)isHasTable:(id)arg1;
- (_Bool)isTable:(id)arg1 hasColumn:(id)arg2;
- (_Bool)issueCommand:(id)arg1 forTable:(id)arg2;
- (id)lastError;
- (int)lastErrorCode;
- (id)lastErrorMessage;
- (long long)lastInsertRowId;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
- (long long)longForQuery:(id)arg1;
- (void)onDBError:(int)arg1 withSql:(id)arg2;
- (_Bool)open;
- (_Bool)openWithFlags:(int)arg1;
- (struct sqlite3_stmt *)prepareStatement:(id)arg1;
- (_Bool)rekey:(id)arg1;
- (_Bool)rekeyWithData:(id)arg1;
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;
- (_Bool)rollback;
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;
- (void)setApplicationID:(unsigned int)arg1;
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;
- (void)setDateFormat:(id)arg1;
- (void)setExceptionHandler:(id)arg1;
- (_Bool)setKey:(id)arg1;
- (_Bool)setKeyWithData:(id)arg1;
- (void)setShouldCacheStatements:(_Bool)arg1;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
- (void)setUserVersion:(unsigned int)arg1;
- (_Bool)shouldCacheStatements;
- (struct sqlite3 *)sqliteHandle;
- (const char *)sqlitePath;
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;
- (id)stringForQuery:(id)arg1;
- (id)stringFromDate:(id)arg1;
- (_Bool)tableExists:(id)arg1;
- (unsigned int)userVersion;
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;
- (void)warnInUse;

@end

