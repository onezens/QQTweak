//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIView.h"

#import "QZTXVideoSDKDelegate.h"
#import "TVKPlaybackDelegate.h"

@class AVAsset, NSArray, NSMutableDictionary, NSString, NSTimer, QZVideoSectionInfo, TVKAsynMediaPlayer;

@interface QZSectionPlayer : UIView <TVKPlaybackDelegate, QZTXVideoSDKDelegate>
{
    TVKAsynMediaPlayer *_player;
    unsigned long long _segNum;
    NSArray *_urlsArray;
    NSArray *_timesArray;
    NSString *_playerId;
    double _lastPlayTime;
    unsigned long long _tryTimes;
    _Bool _isHls;
    NSString *_videoName;
    _Bool _pauseDownload;
    _Bool _muted;
    NSTimer *cachingToPlayTimer;
    unsigned long long waitingNums;
    long long _txSdkPlayID;
    _Bool _isRestartTXSDK;
    long long _downloaddedSize;
    _Bool _isRestartByChangeVkey;
    NSString *_cacheFileId;
    NSMutableDictionary *_segCacheProperty;
    double _defaultDuration;
    _Bool _tReadToPlay;
    double _tCurrentPlaybackTime;
    double _tDurration;
    double _tPlayableDuration;
    NSString *_tVideoFillMode;
    AVAsset *_tAsset;
    long long _currentspeed;
    _Bool _isDownloadCompleted;
    long long _beforStartOpCount;
    _Bool _repeat;
    _Bool _isOnlyVoice;
    _Bool _autoAdaptFillModel;
    _Bool _isPlayCacheFile;
    _Bool _enableResoureLoaderForAts;
    _Bool _disableVideoSpeedLimit;
    _Bool _disableClearCacheWhenError;
    _Bool _delayStartPlay;
    int _playerState;
    int _playerStateUserDesire;
    double _playedTime;
    unsigned long long _playSessionId;
    long long _loadTimeOut;
    id <QZVideoPlayerConfigureDelegate> _configure;
    QZVideoSectionInfo *_sectionInfo;
    long long _errorCode;
    long long _seqNo;
    long long _downloadErrorCode;
    long long _errorTimes;
    long long _numberBeforRestart1005;
    CDUnknownBlockType _onPlaybackReady;
    CDUnknownBlockType _onPlaybackWaitData;
    CDUnknownBlockType _onPlaybackStartPlay;
    CDUnknownBlockType _onPlaybackFailed;
    CDUnknownBlockType _onPlaybackLoadFailed;
    CDUnknownBlockType _onPlaybackEnd;
    CDUnknownBlockType _onPlaybackWillStop;
    CDUnknownBlockType _onPlaybackStop;
    CDUnknownBlockType _onPlaybackWillPause;
    CDUnknownBlockType _onPlaybackPause;
    CDUnknownBlockType _onPlaybackProgress;
    CDUnknownBlockType _onPlaybackSectionChagne;
    CDUnknownBlockType _onPlayerLoadProgress;
    CDUnknownBlockType _onPlayerLoadSpeed;
    CDUnknownBlockType _onPlaybackStateChange;
    CDUnknownBlockType _onPlayerLoadComplete;
    NSMutableDictionary *_stepDuration;
    long long _numberBufferCount;
    long long _actionMask;
    struct CGSize _resolution;
}

- (void).cxx_destruct;
- (void)QZTXVideoSDKDelegate:(long long)arg1 changePlayUrl:(id)arg2 videoInfo:(id)arg3 isRestartByChangeVkey:(_Bool)arg4;
- (void)QZTXVideoSDKDelegate:(long long)arg1 error:(id)arg2;
- (void)QZTXVideoSDKDelegate:(long long)arg1 loadedSize:(long long)arg2 offset:(long long)arg3 fileSize:(long long)arg4 speedKBS:(long long)arg5;
- (void)QZTXVideoSDKDelegateDownloadInfo:(id)arg1;
- (void)QZTXVideoSDKDelegateFileSize:(long long)arg1 httpDownLoadSize:(long long)arg2 readCacheSize:(long long)arg3 clipNo:(long long)arg4 attachInfo:(id)arg5;
- (void)QZTXVideoSDKDelegateStorageFileComplete:(long long)arg1;
@property(nonatomic) long long actionMask; // @synthesize actionMask=_actionMask;
- (id)asset;
@property(nonatomic) _Bool autoAdaptFillModel; // @synthesize autoAdaptFillModel=_autoAdaptFillModel;
- (long long)beforStartOpCount;
- (struct QZVideoFileProperty)cacheProperty;
- (_Bool)cancelAssetLoading;
- (void)checkBackgroundColor;
- (double)checkCachingTimeThanPlayingTime:(long long)arg1 playableDuration:(double)arg2 currentPlaybackTime:(double)arg3;
- (_Bool)checkCachingTimeWithDuration:(double)arg1 currentPlaybackTime:(double)arg2 cachingTimeThanPlayingTime:(double)arg3;
- (void)checkMute;
- (void)clearFileProperty;
- (void)clearTxSdkPlayId;
- (void)cleartCallbackBlock;
@property(retain, nonatomic) id <QZVideoPlayerConfigureDelegate> configure; // @synthesize configure=_configure;
- (long long)correctMinBufferBeforePlay:(long long)arg1;
- (id)currentImage;
- (long long)currentOpCount;
- (double)currentTime;
- (void)dealloc;
@property(nonatomic) _Bool delayStartPlay; // @synthesize delayStartPlay=_delayStartPlay;
- (void)destoryWaithingTimerWithCached;
@property(nonatomic) _Bool disableClearCacheWhenError; // @synthesize disableClearCacheWhenError=_disableClearCacheWhenError;
@property(nonatomic) _Bool disableVideoSpeedLimit; // @synthesize disableVideoSpeedLimit=_disableVideoSpeedLimit;
@property(nonatomic) long long downloadErrorCode; // @synthesize downloadErrorCode=_downloadErrorCode;
- (double)duration;
@property(nonatomic) _Bool enableResoureLoaderForAts; // @synthesize enableResoureLoaderForAts=_enableResoureLoaderForAts;
@property(nonatomic) long long errorCode; // @synthesize errorCode=_errorCode;
@property(nonatomic) long long errorTimes; // @synthesize errorTimes=_errorTimes;
- (void)getCurrentImage:(id)arg1 async:(_Bool)arg2 complete:(CDUnknownBlockType)arg3;
- (void)getCurrentTime:(CDUnknownBlockType)arg1;
- (void)getCurrentVolum:(CDUnknownBlockType)arg1;
- (void)getDuration:(CDUnknownBlockType)arg1;
- (void)getError:(CDUnknownBlockType)arg1;
- (struct QZVideoFileProperty)getFilePropertyByClipNo:(long long)arg1;
- (void)getPlayableDuration:(CDUnknownBlockType)arg1;
- (id)getSdkProxyManager;
- (long long)getSeqNo;
- (id)getVideoDebugInfo;
- (id)getVideoFillMode;
- (long long)getVideoSizeWithNoPlayVideoSize:(long long *)arg1;
- (void)handleCommonError:(id)arg1;
- (void)handleDownloadError:(id)arg1;
- (void)handlePlayError:(id)arg1;
- (void)handlePlayLoadError:(id)arg1;
- (void)handlePlayerLoadingData:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)invalidPlaybackState:(id)arg1;
- (_Bool)isInterrupt;
- (_Bool)isLoadingByHls;
- (_Bool)isMuted;
@property(nonatomic) _Bool isOnlyVoice; // @synthesize isOnlyVoice=_isOnlyVoice;
@property(nonatomic) _Bool isPlayCacheFile; // @synthesize isPlayCacheFile=_isPlayCacheFile;
- (_Bool)isPlaying;
@property(nonatomic) long long loadTimeOut; // @synthesize loadTimeOut=_loadTimeOut;
- (void)makeWaitingTimerWithCachedToPlay;
- (void)mediaPlayerCacheStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withCacheState:(long long)arg4 withIsCurrentPlayFile:(_Bool)arg5;
- (void)mediaPlayerCheckMediaUrlError:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerDidEnterFullscreen:(id)arg1;
- (void)mediaPlayerDidExitFullscreen:(id)arg1;
- (void)mediaPlayerError:(id)arg1 log:(id)arg2;
- (id)mediaPlayerGetAVAsset:(id)arg1 userInfo:(id)arg2 segNo:(long long)arg3 segDuration:(double)arg4;
- (void)mediaPlayerLoadStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerNaturalSizeAvailable:(id)arg1;
- (void)mediaPlayerPlaybackDidFinish:(id)arg1;
- (void)mediaPlayerPlaybackStateDidChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (void)mediaPlayerPlayedItem:(long long)arg1;
- (void)mediaPlayerPrepareToPlay:(long long)arg1;
- (void)mediaPlayerPresentationSize:(struct CGSize)arg1 withFileCacheOrder:(long long)arg2;
- (void)mediaPlayerProgress:(double)arg1 duration:(double)arg2;
- (void)mediaPlayerRequestStateChange:(id)arg1 withError:(id)arg2 withFileCacheOrder:(long long)arg3 withIsCurrentFile:(_Bool)arg4;
- (long long)minBufferBeforePlay:(double)arg1;
- (void)monitorCachingStateWithCached;
- (void)needToChangeBgColor:(CDUnknownBlockType)arg1;
- (void)notifyStateChanged;
@property(nonatomic) long long numberBeforRestart1005; // @synthesize numberBeforRestart1005=_numberBeforRestart1005;
@property(nonatomic) long long numberBufferCount; // @synthesize numberBufferCount=_numberBufferCount;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackEnd; // @synthesize onPlaybackEnd=_onPlaybackEnd;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackFailed; // @synthesize onPlaybackFailed=_onPlaybackFailed;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackLoadFailed; // @synthesize onPlaybackLoadFailed=_onPlaybackLoadFailed;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackPause; // @synthesize onPlaybackPause=_onPlaybackPause;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackProgress; // @synthesize onPlaybackProgress=_onPlaybackProgress;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackReady; // @synthesize onPlaybackReady=_onPlaybackReady;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackSectionChagne; // @synthesize onPlaybackSectionChagne=_onPlaybackSectionChagne;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStartPlay; // @synthesize onPlaybackStartPlay=_onPlaybackStartPlay;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStateChange; // @synthesize onPlaybackStateChange=_onPlaybackStateChange;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackStop; // @synthesize onPlaybackStop=_onPlaybackStop;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWaitData; // @synthesize onPlaybackWaitData=_onPlaybackWaitData;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWillPause; // @synthesize onPlaybackWillPause=_onPlaybackWillPause;
@property(copy, nonatomic) CDUnknownBlockType onPlaybackWillStop; // @synthesize onPlaybackWillStop=_onPlaybackWillStop;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadComplete; // @synthesize onPlayerLoadComplete=_onPlayerLoadComplete;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadProgress; // @synthesize onPlayerLoadProgress=_onPlayerLoadProgress;
@property(copy, nonatomic) CDUnknownBlockType onPlayerLoadSpeed; // @synthesize onPlayerLoadSpeed=_onPlayerLoadSpeed;
- (void)pause:(_Bool)arg1;
- (void)pauseForSeek;
- (void)pausePlayerIfShouldPaused;
- (_Bool)play;
@property(nonatomic) unsigned long long playSessionId; // @synthesize playSessionId=_playSessionId;
- (double)playableDuration;
@property(nonatomic) double playedTime; // @synthesize playedTime=_playedTime;
- (void)playerStarted:(id)arg1;
@property(nonatomic) int playerState; // @synthesize playerState=_playerState;
@property(nonatomic) int playerStateUserDesire; // @synthesize playerStateUserDesire=_playerStateUserDesire;
- (_Bool)playerTimeOut;
- (void)playerWillPause;
- (void)playerWillStop;
- (_Bool)rePlay;
- (_Bool)readyToPlay;
- (void)readyToPlay:(CDUnknownBlockType)arg1;
@property(nonatomic) _Bool repeat; // @synthesize repeat=_repeat;
- (void)reset;
- (void)resetTXSDK:(long long)arg1;
@property(nonatomic) struct CGSize resolution; // @synthesize resolution=_resolution;
- (void)resumeForSeek;
- (void)retryNewUrl:(id)arg1 times:(id)arg2;
- (_Bool)retryPlay:(id)arg1;
@property(copy, nonatomic) QZVideoSectionInfo *sectionInfo; // @synthesize sectionInfo=_sectionInfo;
- (void)seek:(double)arg1;
- (void)sendMediaPlayerLog:(int)arg1 withLogInfo:(id)arg2;
@property(nonatomic) long long seqNo; // @synthesize seqNo=_seqNo;
- (_Bool)setAVAsset:(id)arg1 startTime:(CDStruct_1b6d18a9)arg2;
- (void)setBgColor:(id)arg1;
- (_Bool)setContentUrls:(id)arg1 withContentTimes:(id)arg2 isHLS:(_Bool)arg3 startTime:(double)arg4;
- (void)setDefaultDuration:(double)arg1;
- (void)setMuted:(_Bool)arg1;
@property(retain, nonatomic) NSMutableDictionary *stepDuration; // @synthesize stepDuration=_stepDuration;
- (void)setStepPoint:(double)arg1 forkey:(long long)arg2;
- (void)setVideoFillMode:(id)arg1;
- (void)setVolum:(double)arg1;
- (void)stop;
- (void)stop:(CDUnknownBlockType)arg1;
- (id)transError:(id)arg1;
- (void)updateContentUrls:(id)arg1;
- (void)updateFileProperty:(struct QZVideoFileProperty *)arg1 withClipNo:(long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

